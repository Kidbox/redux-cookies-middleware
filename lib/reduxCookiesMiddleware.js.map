{"version":3,"sources":["../src/reduxCookiesMiddleware.js"],"names":["reduxCookiesMiddleware","paths","customOptions","options","logger","console","error","setCookie","defaultEqualityCheck","a","b","defaultDeleteCheck","value","_getVal","state","path","pathPartsList","split","index","length","pathPart","Object","hasOwnProperty","call","action","prevState","store","getState","result","next","nextState","keys","forEach","data","pathToState","prevVal","nextVal","item","equalityCheck","deleteCheck","name","JSON","stringify"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;;AAKA,IAAMA,yBAAyB,SAAzBA,sBAAyB,GAAoC;AAAA,QAAnCC,KAAmC,uEAA3B,EAA2B;AAAA,QAAvBC,aAAuB,uEAAP,EAAO;;AAC/D,QAAMC;AACFC,gBAAQC,QAAQC,KADd;AAEFC,sCAFE;AAGFC,8BAAsB,8BAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAWD,MAAMC,CAAjB;AAAA,SAHpB;AAIFC,4BAAoB;AAAA,mBAAU,OAAOC,KAAP,KAAiB,WAA3B;AAAA;AAJlB,OAKCV,aALD,CAAN;;AAQA,QAAMW,UAAU,SAAVA,OAAU,CAACC,KAAD,EAAQC,IAAR,EAAiB;AAC7B,YAAMC,gBAAgBD,KAAKE,KAAL,CAAW,GAAX,CAAtB;AACA,YAAIL,QAAQE,KAAZ;AACA,YAAII,cAAJ;;AAEA,aAAKA,QAAQ,CAAb,EAAgBA,QAAQF,cAAcG,MAAtC,EAA8CD,SAAS,CAAvD,EAA0D;AACtD,gBAAME,WAAWJ,cAAcE,KAAd,CAAjB;;AAEA,gBAAIG,OAAOC,cAAP,CAAsBC,IAAtB,CAA2BX,KAA3B,EAAkCQ,QAAlC,CAAJ,EAAiD;AAC7CR,wBAAQA,MAAMQ,QAAN,CAAR;AACH,aAFD,MAEO;AACHjB,wBAAQC,MAAR,0CAAsDW,IAAtD;AACA;AACH;AACJ;;AAED,eAAQG,UAAUF,cAAcG,MAAzB,GAAmCP,KAAnC,GAA2C,IAAlD;AACH,KAjBD;;AAmBA,WAAO;AAAA,eAAS;AAAA,mBAAQ,UAACY,MAAD,EAAY;AAChC,oBAAMC,YAAYC,MAAMC,QAAN,EAAlB;AACA,oBAAMC,SAASC,KAAKL,MAAL,CAAf;AACA,oBAAMM,YAAYJ,MAAMC,QAAN,EAAlB;;AAEAN,uBAAOU,IAAP,CAAY9B,KAAZ,EAAmB+B,OAAnB,CAA2B,uBAAe;AACtC,wBAAIC,OAAO,EAAX;AACA,wBAAI,wBAAWhC,MAAMiC,WAAN,CAAX,CAAJ,EAAoC;AAChCD,+BAAOhC,MAAMiC,WAAN,EAAmBT,SAAnB,EAA8BK,SAA9B,CAAP;AACH,qBAFD,MAEO;AACHG,+BAAO,CAAC;AACJE,qCAAStB,QAAQY,SAAR,EAAmBS,WAAnB,CADL;AAEJE,qCAASvB,QAAQiB,SAAR,EAAmBI,WAAnB,CAFL;AAGJpB,mCAAOb,MAAMiC,WAAN;AAHH,yBAAD,CAAP;AAKH;;AAEDD,yBAAKD,OAAL,CAAa,gBAAQ;AAAA,4BACVlB,KADU,GACiBuB,IADjB,CACVvB,KADU;AAAA,4BACHqB,OADG,GACiBE,IADjB,CACHF,OADG;AAAA,4BACMC,OADN,GACiBC,IADjB,CACMD,OADN;;AAEjB,4BAAME,gBAAgBxB,MAAMwB,aAAN,IAAuBnC,QAAQK,oBAArD;AACA,4BAAM+B,cAAczB,MAAMyB,WAAN,IAAqBpC,QAAQQ,kBAAjD;;AAEA,4BAAI,CAAC2B,cAAcH,OAAd,EAAuBC,OAAvB,CAAL,EAAsC;AAClC,gCAAIG,YAAYH,OAAZ,CAAJ,EAA0B;AACtBjC,wCAAQI,SAAR,CAAkBO,MAAM0B,IAAxB,EAA8BC,KAAKC,SAAL,CAAeN,OAAf,CAA9B,EAAuD,CAAvD;AACH,6BAFD,MAEO;AACHjC,wCAAQI,SAAR,CAAkBO,MAAM0B,IAAxB,EAA8BC,KAAKC,SAAL,CAAeN,OAAf,CAA9B;AACH;AACJ;AACJ,qBAZD;AAaH,iBAzBD;;AA2BA,uBAAOR,MAAP;AACH,aAjCe;AAAA,SAAT;AAAA,KAAP;AAkCH,CA9DD;;kBAgEe5B,sB","file":"reduxCookiesMiddleware.js","sourcesContent":["import setCookie from './cookieApi';\nimport {isFunction} from 'lodash';\n\n/**\n * Middleware to persist state in cookies.\n * @param {Object} paths\n * @param {Object} customOptions\n */\nconst reduxCookiesMiddleware = (paths = {}, customOptions = {}) => {\n    const options = {\n        logger: console.error,\n        setCookie,\n        defaultEqualityCheck: (a, b) => (a === b),\n        defaultDeleteCheck: value => (typeof value === 'undefined'),\n        ...customOptions\n    };\n\n    const _getVal = (state, path) => {\n        const pathPartsList = path.split('.');\n        let value = state;\n        let index;\n\n        for (index = 0; index < pathPartsList.length; index += 1) {\n            const pathPart = pathPartsList[index];\n\n            if (Object.hasOwnProperty.call(value, pathPart)) {\n                value = value[pathPart];\n            } else {\n                options.logger(`state not found at store.getState().${path}`);\n                break;\n            }\n        }\n\n        return (index === pathPartsList.length) ? value : null;\n    };\n\n    return store => next => (action) => {\n        const prevState = store.getState();\n        const result = next(action);\n        const nextState = store.getState();\n\n        Object.keys(paths).forEach(pathToState => {\n            let data = [];\n            if (isFunction(paths[pathToState])) {\n                data = paths[pathToState](prevState, nextState);\n            } else {\n                data = [{\n                    prevVal: _getVal(prevState, pathToState),\n                    nextVal: _getVal(nextState, pathToState),\n                    state: paths[pathToState]\n                }];\n            }\n\n            data.forEach(item => {\n                const {state, prevVal, nextVal} = item;\n                const equalityCheck = state.equalityCheck || options.defaultEqualityCheck;\n                const deleteCheck = state.deleteCheck || options.defaultDeleteCheck;\n\n                if (!equalityCheck(prevVal, nextVal)) {\n                    if (deleteCheck(nextVal)) {\n                        options.setCookie(state.name, JSON.stringify(nextVal), 0);\n                    } else {\n                        options.setCookie(state.name, JSON.stringify(nextVal));\n                    }\n                }\n            });\n        });\n\n        return result;\n    };\n};\n\nexport default reduxCookiesMiddleware;\n"]}